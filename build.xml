<?xml version="1.0" encoding="UTF-8" ?>

<!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

USAGE: ant [-Dbundles=(image | dmg | pkg | all)]

image (default):	Build a .app bundle
dmg:				Build a .dmg file containing the .app bundle
pkg:				Build a .pkg executable that installs the .app bundle
all:				Build all of the above

Build products can be found in build/bundles.

Notes:

- Currently requires Oracle Java 1.8 update 162 or higher (with earlier 1.8
  versions, bughttps://bugs.java.com/bugdatabase/view_bug.do?bug_id=8190758
  causes a failure while building the .dmg file.

- Java 10 will be suported after the deprecated com.apple.eaws clasess are
  replaced by java.awt.desktop equivalents. These classes were moved from
  ui.jar to rt.jar in JDK 8, and were removed entirely in JDK 9+
  
- Java 11 is currently not supported, since the ant-javafx.jar file which
  provides the ant tasks is not currently available.
  
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- For java 8, update 162 or higher is required when building dmg files
see https://bugs.java.com/bugdatabase/view_bug.do?bug_id=8190758 -->
 
<project name="PeriMelon Application" default="default" basedir="."
  xmlns:fx="javafx:com.sun.javafx.tools.ant">
 
	<property name="app_version" value="1.4.2" />
	<property name="lib" location="lib" />
	<property environment="env" />
  	<property name="build.src.dir" value="src"/>
  	<property name="build.classes.dir" value="classes"/>
	<property name="build.bundles.dir" value="build/bundles"/>
	<property name="jdk.version" value="1.8" />
  	<property name="build.dist.dir" value="dist"/>
	<property name="default.native.bundles" value="image" />
	
	<exec executable="/usr/libexec/java_home" outputproperty="JAVA_HOME" resultproperty="exec.result">
		<arg line="-v ${jdk.version} -F" />
	</exec>
	<fail message="This script requires JDK version ${jdk.version}, and it is not installed">
		<condition>
			<isfailure code="${exec.result}" />
		</condition>
	</fail>
	
	<echo message="JAVA HOME: ${JAVA_HOME}" />

	
  	<path id="boot.classpath">
		<pathelement location="${JAVA_HOME}/jre/lib/rt.jar"/>
  	</path>
  	<path id="app.classpath">
		<fileset dir="${lib}">
			<include name="*.jar" />
			<include name="*.txt" />
		</fileset>
		<pathelement path="classes"/>
  	</path>
	
	<condition property="native.bundles" value="${bundles}" else="${default.native.bundles}">
			<isset property="bundles" />
	</condition>
 
  <target name="default" depends="clean,compile">
 
    <taskdef resource="com/sun/javafx/tools/ant/antlib.xml"
      uri="javafx:com.sun.javafx.tools.ant"
      classpath=".:./package/macosx:${JAVA_HOME}:${JAVA_HOME}/lib/ant-javafx.jar"/>
 
	 <fx:application id="perimeleon"
	    name="Peri Meleon"
		version="${app_version}"
	    mainClass="com.tamelea.pm.PeriMeleon" />
 
     <fx:resources id="appRes">
        <fx:fileset dir="${build.dist.dir}" includes="members.jar"/>
	 	<fx:fileset dir="." type="jar" includes="lib/*.jar" />
        <fx:fileset dir="." type="data" includes="lib/*.txt" />
     </fx:resources>
 
  	<fx:jar destfile="${build.dist.dir}/members.jar" >
    	<fx:application refid="perimeleon"/>
  		<fx:resources refid="appRes" />
  		<fx:fileset dir="${build.classes.dir}"/>
  	</fx:jar>
 
  	<fx:deploy outdir="build" verbose="true"
  		embedJNLP="false"
	    outfile="permimeleon"
	    nativeBundles="${native.bundles}">
	    <fx:platform basedir="${JAVA_HOME}"/>
	    <fx:application refId="perimeleon"/>
		<fx:resources refId="appRes" />
	    <fx:info title="Peri Meleon" />
   </fx:deploy>
 
  </target>
 
  <target name="clean">
    <mkdir dir="${build.classes.dir}"/>
    <mkdir dir="${build.dist.dir}"/>
 
    <delete>
      	<fileset dir="${build.classes.dir}" includes="**/*"/>
      	<fileset dir="${build.dist.dir}" includes="**/*"/>
    </delete>
  	
  	<delete dir="${build.bundles.dir}" />
 
  </target>
 
  <target name="compile" depends="clean">
 
    <javac includeantruntime="false"
      includeJavaRuntime="true"
      srcdir="${build.src.dir}"
      destdir="${build.classes.dir}"
      fork="yes"
      executable="${JAVA_HOME}/bin/javac"
      source="1.8"
      debug="on"
      classpathref="app.classpath"
      bootclasspathref="boot.classpath">
    </javac>
  	
  	<copy todir="${build.classes.dir}">
		<fileset dir="${build.src.dir}">
			<include name="com/**/*" />
			<include name="help/**/*" />
			<exclude name="**/.svn/*" />
			<exclude name="**/*.java" />
		</fileset>
	</copy>
    
  </target>
 
</project>
